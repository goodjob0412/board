plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.btistudy'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /* actuator, web */
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    /* jpa, mysql, h2*/
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    /* thymeleaf - 타임리프 */
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    /* spring security - 스프링 시큐리티 */
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6' /* 타임리프랑 시큐리티랑 같이 넣어야 나오는 숨겨진 implementation */
//    testImplementation 'org.springframework.security:spring-security-test'



    /* 스프링부트 3.X 대 버전 - 이거 하고 맨 아래 */
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    ////////////////////////////////////////////////////////////////////

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

////////////// 스프링 3버전용 - queryDSL 설정부 //////////////////
def generated = 'src/main/generated'
clean {
    delete file(generated)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(generated)
}